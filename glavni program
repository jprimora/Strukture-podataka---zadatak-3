#include <iostream>
#include <ctime>
//#include "redpolje.h"
#include "redpok.h"

using namespace std;

struct tcetvorke{
       int a,b,c,d;
}*cetvorke;

void generiranje(int n){
     srand(time(0));
     rand();
     cetvorke = new tcetvorke[n];
     for(int i=0;i<n;i++){
             cetvorke[i].a = (rand()%401)+100;
             cetvorke[i].b = (rand()%401)+100;     
             cetvorke[i].c = (rand()%6)+1;
             do{
                cetvorke[i].d = (rand()%4) +1;           
             }while((cetvorke[i].d == 2 && cetvorke[i].c==6) || (cetvorke[i].d == 4 && cetvorke[i].c==1));
     }        
}

void prioriteti(tred *R,int n,int prioritet){
     tred *P = new tred;
     InitQ(P);
     for(int i=0;i<n;i++){
             tljudi a = FrontQ(R);
             DeQueueQ(R);
             if(a.c == prioritet)
                EnQueueQ(&a,P);
             else
                 EnQueueQ(&a,R);
     }
     while(!IsEmptyQ(P)){
           tljudi a = FrontQ(P);
           DeQueueQ(P);
           EnQueueQ(&a,R);    
     }
     delete P;
}

void status(int x){
     switch(x){
          case 1: 
               cout<<"Umirovljenik";
               break;
          case 2:
               cout<<"Invalid";
               break;
          case 3:
               cout<<"Trudnica";
               break;
          case 4:
               cout<<"VIP klijent";
               break;
          case 5:
               cout<<"Ostali";
               break;
          case 6:
               cout<<"Nije klijent banke";
               break; 
     }    
}

void transakcija(int x){
      switch(x){
               case 1: cout << "Uplata";
               break;
               case 2: cout << "Isplata";
               break;
               case 3: cout << "Placanje racuna";
               break;
               case 4: cout << "Kredit";
      }    
}

void ispis(tred *R){
     tred *P = new tred;
     InitQ(P);
     
     cout << "Ime i prezime\tTekuci\tDevizni\tPrioritet\tTransakcija\tNa redu"<<endl;
     cout << "_________________________________________________________________________"<<endl;
     int zbroj = 0, redni = 0;
     while(!IsEmptyQ(R)){
                          tljudi novi = FrontQ(R);
                          novi.redni = redni++;
                          DeQueueQ(R);
                          zbroj +=novi.a + novi.b;
                          cout<<novi.ime_prez<<"\t"<< novi.tek<<"\t"<< novi.dev <<" \t";

                          status(novi.c);
                          cout<<"\t";
                          transakcija(novi.d);                          
                          
                          cout<<"\t"<<(zbroj/60/60)%24+7 << ":" << ((zbroj/60)%60 <10? "0":"") << (zbroj/60)%60 <<endl;
                          
                          EnQueueQ(&novi,P);
     }
     while(!IsEmptyQ(P)){
                           tljudi novi = FrontQ(P);
                           DeQueueQ(P);
                           EnQueueQ(&novi,R);
     }
     delete P;        
}

void dodavanje(int n,tred *R){
     cout << "Dodavanje klijenata("<<n<<")"<<endl;
     tljudi *novi = new tljudi;
     for(int i=0;i<n;i++){
             cout<<i+1<<". klijent:"<<endl;
             cout << "Ime i prezime: ";
             cin.ignore();
             cin.getline(novi->ime_prez,50);
               
             cout << "Datum rodenja"<<endl;
             cout << " dan: ";
             do
             cin >> novi->dan;
             while(novi->dan>31);
             
             cout << " mjesec: ";
             do
             cin >> novi->mj;
             while (novi->mj>12);
             
             cout << " godina: ";
             do
             cin >> novi->god;
             while(novi->god<1900 && novi->god>1997);

             cout << "Stanje na tekucem (kn): ";
             cin >> novi->tek;
             
             cout << "Stanje na deviznom (euro): ";
             cin >> novi->dev;
             cout << endl << endl;
             
             novi->a = cetvorke[i].a;
             novi->b = cetvorke[i].b;
             novi->c = cetvorke[i].c;
             novi->d = cetvorke[i].d;
             EnQueueQ(novi,R);
             }
             
            
     for(int i=1;i<7;i++)
             prioriteti(R,n,i);
     


                   
     tred *P = new tred;
     InitQ(P);
     
     
     
     cout << "\nKlijenti koji imaju viÅ¡e od 10 000 kn u eurima na deviznom racunu."<<endl;
     cout<<"10 000 HRK = 1325 EUR"<<endl<<endl;
     
     cout << "Ime i prezime\tTekuci\tDevizni\tPrioritet\tTransakcija\tNa redu"<<endl;
     cout << "_________________________________________________________________________"<<endl;
     while(!IsEmptyQ(R)){
                          tljudi x = FrontQ(R);
                          DeQueueQ(R);
                          if(x.dev * 7.5471 > 10000){
                              cout << x.ime_prez<<"\t"<<x.tek<<"\t"<<x.dev<<" \t";
                              status(x.c);
                              cout <<"\t";
                              transakcija(x.d);                          
                              cout << endl;
                          }
                          EnQueueQ(&x,P);
                          }

     while(!IsEmptyQ(P)){
                           tljudi x = FrontQ(P);
                           DeQueueQ(P);
                           EnQueueQ(&x,R);
                           }
     delete P;
}
          
void sim_brzi(bool brzi_red,tred *B,tred *R){
     if(!brzi_red){
         brzi_red = true;
         tred *P= new tred;
         InitQ(P);
         InitQ(B);
         
         while(!IsEmptyQ(R)){
                              tljudi x = FrontQ(R);
                              DeQueueQ(R);
                              if(x.d == 3) 
                                     EnQueueQ(&x,B);
                              else 
                                   EnQueueQ(&x,P); 
                              }
         
         while(!IsEmptyQ(P)){
                               tljudi x = FrontQ(P);
                               DeQueueQ(P);
                               EnQueueQ(&x,R);
                               }
              delete P;
     }
     cout<<"Stanje brzog reda"<<endl;
     cout<<"_________________"<<endl;
     ispis(B);
     cout << endl;
     }
     
void brisanje(tred *R){
     tred *P = new tred;
     InitQ(P);
     
     while(!IsEmptyQ(R)){
                           tljudi x = FrontQ(R);
                           DeQueueQ(R);
                                                         
                           if(!((x.c == 4 && x.god > 1982 && x.d == 1 && x.tek<100) || 
                                (x.c == 1 && x.d == 2 && x.tek >5000)))
                                        EnQueueQ(&x,P);
                           else cout << "Brisanje klijenta: " << x.ime_prez << endl;
                           }
     cout << endl;
                           
     while(!IsEmptyQ(P)){
                           tljudi x = FrontQ(P);
                           DeQueueQ(P);
                           EnQueueQ(&x,R);
                           }
     delete P;
     ispis(R);
     }

int brojenje(tred *R){
     tred *P = new tred;
     InitQ(P);
     int br = 0;
     while(!IsEmptyQ(R)){
                           tljudi x = FrontQ(R);
                           DeQueueQ(R);
                           EnQueueQ(&x,P);                              
                           br++;
                           }
                           
     while(!IsEmptyQ(P)){
                           tljudi x = FrontQ(P);
                           DeQueueQ(P);
                           EnQueueQ(&x,R);
                           }
     delete P;
     cout << "Broj klijenata u redu: " << br << endl;
     return br;
     }


void preokreni(tred *R){
          if(IsEmptyQ(R)) return;
          tljudi a = FrontQ(R);
          DeQueueQ(R);
          preokreni(R);
          EnQueueQ(&a,R);              
}

void prebacivanje_u_novi(int br_elem,tred *R,tred *N){
     if(IsEmptyQ(R))return;
     tljudi a = FrontQ(R);
     DeQueueQ(R);
     prebacivanje_u_novi(br_elem,R,N);
     if(a.redni < br_elem-int(0.3*br_elem+0.5))
                  EnQueueQ(&a,R);
     else 
          EnQueueQ(&a,N);     
}

int main(){
    tred *R = new tred;
    tred *B = new tred;
    tred *N = new tred;
    InitQ(R);
    int n,izb,br,br_elem;
    bool novi_red = false, brzi_red= false;
    
    
    cout<< "Unesite koliko klijenata zelite u redu u banci: ";
    cin>>n;
    
    generiranje(n);
    
    do{
       cout<<endl<<"**Izbornik**"<<endl<<"__________________"<<endl;
       cout<<"1. Dodavanje klijenata u red ("<<n<<" klijenata)"<<endl;
       cout<<"2. Simuliranje brzog reda u banci"<<endl;
       cout<<"3. Brisanje"<<endl<<"  svih VIP klijenata mladjih od 30 s manje od 100 kn na racunu i zele izvrsiti uplatu"<<endl;
       cout<<"  svih umirovljenika koji zele isplatu a imaju vise od 50000 kuna na racunu."<<endl;
       cout<<"4. Ispisivanje stanja reda."<<endl;
       cout<<"5. Dodavanje novog reda"<<endl;
       cout<<"9. Kraj programa"<<endl;
       cin>> izb;
       
       switch(izb){
                   case 1:
                        dodavanje(n,R);
                        break;
                   case 2:
                        sim_brzi(brzi_red,B,R);
                        cout<<" Stanje glavnog reda u banci"<<endl;
                        cout<<" ___________________________"<<endl;
                        ispis(R);
                   case 3:
                        brisanje(R);
                        break;
                   case 4:
                        ispis(R);
                        break;
                   case 5:
                        if(!novi_red){
                                      br_elem = brojenje(R);
                                      novi_red = true;
                                      InitQ(N);
                                      prebacivanje_u_novi(br_elem,R,N);
                                      preokreni(R);
                                      }
                        cout<<"Stanje novog reda u banci"<<endl;
                        cout<<"_________________________"<<endl;
                        ispis(N);
                        cout<<"Stanje glavnog reda u banci"<<endl;
                        cout<<"___________________________"<<endl;
                        ispis(R);
                        break;
                        
                   }
                                                      
    }while(izb !=9);                   
    system("pause");
    return 0;    
}
